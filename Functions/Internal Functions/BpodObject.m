%{
----------------------------------------------------------------------------

This file is part of the Sanworks Bpod repository
Copyright (C) 2017 Sanworks LLC, Sound Beach, New York, USA

----------------------------------------------------------------------------

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3.

This program is distributed  WITHOUT ANY WARRANTY and without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
%}
classdef BpodObject < handle
    properties
        FirmwareBuild % An integer specifying the firmware on the connected device
        SerialPort % ArCOM serial port object
        HW % Hardware description
        Modules % Connected UART serial module description
        Status % Struct with system status variables
        Path % Struct with paths to Bpod root folder and specific sub-folders
        Data % Struct storing all data collected in the current session. SaveBpodSessionData saves this to the current data file.
        StateMatrix % Struct of matrices describing current state machine
        HardwareState % Current state of I/O lines and serial codes
        StateMachineInfo % Struct with information about state machines (customized for connected hardware)
        GUIHandles % Struct with graphics handles
        GUIData % Struct with graphics data
        InputsEnabled % Struct storing input channels that are connected to something. This is modified from the settings menu UI.
        SyncConfig % Struct storing the sync channel and mode (modified from settings menu UI)
        PluginSerialPorts % Struct with serial port objects for plugins (modules)
        PluginFigureHandles % Struct with figure handles for plugins
        PluginObjects % Struct with plugin objects
        SystemSettings % Struct with miscellaneous system settings
        SoftCodeHandlerFunction % The path to an m-file that accepts a byte code from Bpod and executes a MATLAB function (play sound, etc.)
        ProtocolFigures % A struct to hold figures used by the current protocol, which are automatically closed when the user presses the "Stop" button
        ProtocolSettings % The settings struct selected by the user in the launch manager, when launching a protocol
        Emulator % A struct with the internal variables of the emulator (mirror of state machine workspace in Arduino)
        ManualOverrideFlag % Used in the emulator to indicate an override that needs to be handled
        VirtualManualOverrideBytes % Stores emulated event byte codes generated by manual override
        CalibrationTables % Struct for liquid, sound, etc.
        BlankStateMachine % Holds a blank state machine to use with AddState().
        ProtocolStartTime % The time when the current protocol was started.
        BonsaiSocket % An object containing a TCP/IP socket for communication with Bonsai
        EmulatorMode % 0 if actual device connected, 1 if emulator
        HostOS % Holds a string naming the host operating system (i.e. 'Microsoft Windows XP')
        MachineType % 1 = Arduino Due / Bpod 0.5, 0.7. 2 = Pocket State Machine
    end
    properties (Access = private)
        ProtocolSelectorLastValue % Last protocol selected in UI
        SplashData % Splash screen frames
        LastHardwareState % Last known state of I/O lines and serial codes
        CycleMonitoring % 0 = off, 1 = on. Measures min and max actual hardware timer callback execution time
    end
    methods
        function obj = BpodObject %Constructor
            BpodPath = fileparts(which('Bpod'));
            addpath(genpath(fullfile(BpodPath, 'Assets')));
            addpath(genpath(fullfile(BpodPath, 'Examples', 'State Machines')));
            load SplashBGData;
            load SplashMessageData;
            if exist('rng','file') == 2
                rng('shuffle', 'twister'); % Seed the random number generator by CPU clock
            else
                rand('twister', sum(100*fliplr(clock))); % For older versions of MATLAB
            end
            % Check for font
            F = listfonts;
            %JPL - library has been copied to /Fonts, but matlab isnt
            %seeing it
            %if (sum(strcmp(F, 'OCRAStd')) == 0) && (sum(strcmp(F, 'OCR A Std')) == 0)
            if 1==0
                disp('ALERT! Bpod needs to install a system font in order to continue.')
                input('Press enter to install the font...');
                FontInstalled = 0;
                try
                    if ispc
                        system(fullfile(BpodPath, 'Assets', 'Fonts', 'OCRASTD.otf'));
                        FontInstalled = 1;
                    elseif ismac
                        copyfile(fullfile(BpodPath, 'Assets', 'Fonts', 'OCRASTD.otf'), '/Library/Fonts');
                        FontInstalled = 1;
                    else
                        disp('Please install the font using the Ubuntu font viewer, and close the font viewer to continue.')
                        MatlabPath = getenv('LD_LIBRARY_PATH');
                        setenv('LD_LIBRARY_PATH',getenv('PATH'));
                        FontPath = fullfile(BpodPath, 'Assets', 'Fonts', 'OCRAStd.otf');
                        system(['gnome-font-viewer ' FontPath]);
                        setenv('LD_LIBRARY_PATH',MatlabPath);
                        FontInstalled = 1;
                    end
                catch
                    error('Bpod was unable to install the font. Please install it manually from /Bpod/Media/Fonts/OCRASTD, and restart MATLAB. If you are having trouble, try running "sudo apt dist-upgrade" from a terminal before launching font viewer.')
                end
                if FontInstalled
                    error('Font installed. Please restart MATLAB and run Bpod again.')
                end
            end
            obj.SplashData.BG = SplashBGData;
            obj.SplashData.Messages = SplashMessageData;
            obj.GUIHandles.SplashFig = figure('Position',[400 300 485 300],'name','Bpod','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');
            obj.BonsaiSocket.Connected = 0;
            obj.Status.BpodStartTime = now;
            obj.Status = struct;
            obj.Status.LastTimestamp = 0;
            obj.Status.CurrentStateCode = 0;
            obj.Status.LastStateCode = 0;
            obj.Status.CurrentStateName = '';
            obj.Status.LastStateName = '';
            obj.Status.LastEvent = 0;
            obj.Status.Live = 0;
            obj.Status.Pause = 0;
            obj.Status.InStateMatrix = 0;
            obj.Status.BeingUsed = 0;
            obj.Status.BpodStartTime = 0;
            obj.Status.CurrentProtocolName = '';
            obj.Status.SerialPortName = '';
            obj.Status.NewStateMachineSent = 0;
            obj.Path = struct;
            obj.Path.BpodRoot = BpodPath;
            obj.Path.ParentDir = fullfile(BpodPath(1:end-4));
            obj.Path.LocalDir = fullfile(obj.Path.ParentDir, 'Bpod Local');
            obj.Path.SettingsDir = fullfile(obj.Path.LocalDir, 'Settings');
            obj.Path.Settings = '';
            obj.Path.DataFolder = '';
            obj.Path.CurrentDataFile = '';
            obj.Path.CurrentProtocol= '';
            obj.Path.InputConfig = fullfile(obj.Path.SettingsDir, 'InputConfig.mat');
            obj.Path.SyncConfig = fullfile(obj.Path.SettingsDir, 'SyncConfig.mat');
            obj.StateMachineInfo = struct;
            obj.StateMachineInfo.nEvents = 0; % Number of events the state machine can respond to
            obj.StateMachineInfo.EventNames = 0; % Cell array of strings with names for each event
            obj.StateMachineInfo.InputChannelNames = 0; % cell array of strings with names for input channels
            obj.StateMachineInfo.nOutputChannels = 0; % Number of output channels
            obj.StateMachineInfo.OutputChannelNames = 0; % Cell array of strings with output channel names
            obj.StateMachineInfo.MaxStates = 0; % Maximum number of states the attached Bpod can store
            if ~exist(obj.Path.LocalDir)
                mkdir(obj.Path.LocalDir);
            end
            if ~exist(obj.Path.SettingsDir)
                mkdir(obj.Path.SettingsDir);
            end
            addpath(genpath(obj.Path.SettingsDir));
            if exist('BpodSettings.mat') > 0
                load BpodSettings;
                obj.SystemSettings = BpodSettings;
            else
                obj.SystemSettings = struct;
            end
            obj.Path.ProtocolFolder = '';
            if isfield(obj.SystemSettings, 'ProtocolFolder')
                if exist(obj.SystemSettings.ProtocolFolder)
                    obj.Path.ProtocolFolder = obj.SystemSettings.ProtocolFolder;
                end
            end
            obj.Path.DataFolder = '';
            if isfield(obj.SystemSettings, 'DataFolder')
                if exist(obj.SystemSettings.DataFolder)
                    obj.Path.DataFolder = obj.SystemSettings.DataFolder;
                end
            end
            
            obj.HostOS = system_dependent('getos');
            CalFolder = fullfile(obj.Path.LocalDir,'Calibration Files');
            if ~exist(CalFolder)
                mkdir(CalFolder);
                copyfile(fullfile(obj.Path.BpodRoot, 'Examples', 'Example Calibration Files'), CalFolder);
                questdlg('Calibration folder created in /BpodLocal/. Replace example calibration files soon.', ...
                    'Calibration folder not found', ...
                    'Ok', 'Ok');
            end
            % Liquid
            try
                LiquidCalibrationFilePath = fullfile(obj.Path.LocalDir, 'Calibration Files', 'LiquidCalibration.mat');
                load(LiquidCalibrationFilePath);
                obj.CalibrationTables.LiquidCal = LiquidCal;
            catch
                obj.CalibrationTables.LiquidCal = [];
            end
            % Sound
            try
                SoundCalibrationFilePath = fullfile(obj.Path.LocalDir, 'Calibration Files', 'SoundCalibration.mat');
                load(SoundCalibrationFilePath);
                obj.CalibrationTables.SoundCal = SoundCal;
            catch
                obj.CalibrationTables.SoundCal = [];
            end
            % Load input channel settings
            if ~exist(obj.Path.InputConfig)
                copyfile(fullfile(obj.Path.BpodRoot, 'Examples', 'Example Settings Files', 'InputConfig.mat'), obj.Path.InputConfig);
            end
            load(obj.Path.InputConfig);
            obj.InputsEnabled = BpodInputConfig;
            % Load sync settings
            if ~exist(obj.Path.SyncConfig)
                copyfile(fullfile(obj.Path.BpodRoot, 'Examples', 'Example Settings Files', 'SyncConfig.mat'), obj.Path.SyncConfig);
            end
            load(obj.Path.SyncConfig);
            obj.SyncConfig = BpodSyncConfig;
            obj.BpodSplashScreen(1);
        end
        function obj = InitializeHardware(obj, portString, varargin)
            if strcmp(portString, 'AUTO')
                Ports = obj.FindArduinoPorts;
            else
                Ports = {portString};
            end
            nPorts = length(Ports);
            Found = 0;
            iPort = 1;
            if nargin > 2
                ForceJava = 1;
            else
                ForceJava = 0;
            end
            while (Found == 0) && (iPort <= nPorts)
                ThisPort = Ports{iPort};
                disp(['Trying port: ' ThisPort])
                if ForceJava
                    obj.SerialPort = ArCOMObject_Bpod(ThisPort, 115200, 'Java');
                else
                    obj.SerialPort = ArCOMObject_Bpod(ThisPort, 115200);
                end
                obj.SerialPort.write('6', 'uint8');
                pause(.1)
                if obj.SerialPort.bytesAvailable > 0
                    Reply = obj.SerialPort.read(1, 'uint8');
                    if Reply == '5'
                        Found = 1;
                        thisPortIndex = iPort;
                        obj.Status.SerialPortName = ThisPort;
                    else
                        obj.SerialPort.delete;
                    end
                else
                    obj.SerialPort.delete;
                end
                iPort = iPort + 1;
            end
            if Found
                obj.EmulatorMode = 0;
            else
                error('Error: Could not find Bpod device.');
            end
            disp(['Bpod connected on port ' Ports{thisPortIndex}])
            obj.SystemSettings.LastCOMPort = Ports{thisPortIndex};
            obj.SaveSettings;
            obj.EmulatorMode = 0;
            obj.BpodSplashScreen(2);
        end
        function obj = Setup(obj)
            if obj.EmulatorMode == 1 % Set up as Bpod 0.7
                obj.StateMachineInfo.MaxStates = 256;
                obj.HW.CyclePeriod = 100;
                obj.HW.CycleFrequency = 10000;
                obj.HW.n.EventsPerSerialChannel = 10;
                obj.HW.n.GlobalTimers = 5;
                obj.HW.n.GlobalCounters  = 5;
                obj.HW.n.Conditions  = 5;
                obj.HW.n.Inputs = 16;
                obj.HW.Inputs = 'UUUXBBWWPPPPPPPP';
                obj.HW.n.Outputs = 18;
                obj.HW.Outputs = 'UUUXSBBWWWPPPPPPPPGGG';
                close(obj.GUIHandles.LaunchEmuFig);
                disp('Connection aborted. Bpod started in Emulator mode.')
                obj.FirmwareBuild = 9;
                obj.MachineType = 1;
                nModules = sum(obj.HW.Outputs=='U');
                obj.Modules.Connected = zeros(1,nModules);
                obj.Modules.Name = cell(1,nModules);
            else
                % Get firmware version
                obj.SerialPort.write('F', 'uint8');
                obj.FirmwareBuild = obj.SerialPort.read(1, 'uint16');
                obj.MachineType = obj.SerialPort.read(1, 'uint16');
                obsoleteFirmware = [7 8 9];
                if sum(obsoleteFirmware == obj.FirmwareBuild) > 0
                    error('Old firmware detected. Please update Bpod firmware, restart MATLAB and try again.')
                end
                % Request hardware description
                obj.SerialPort.write('H', 'uint8');
                obj.HW.n = struct; % Stores total numbers of different types of channels (e.g. 5 BNC input channels)
                obj.StateMachineInfo.MaxStates = obj.SerialPort.read(1, 'uint16');
                obj.HW.CyclePeriod = double(obj.SerialPort.read(1, 'uint16'));
                obj.HW.CycleFrequency = 1000000/double(obj.HW.CyclePeriod);
                obj.HW.n.EventsPerSerialChannel = double(obj.SerialPort.read(1, 'uint8'));
                obj.HW.n.GlobalTimers = double(obj.SerialPort.read(1, 'uint8'));
                obj.HW.n.GlobalCounters  = double(obj.SerialPort.read(1, 'uint8'));
                obj.HW.n.Conditions  = double(obj.SerialPort.read(1, 'uint8'));
                obj.HW.n.Inputs = double(obj.SerialPort.read(1, 'uint8'));
                obj.HW.Inputs = char(obj.SerialPort.read(obj.HW.n.Inputs, 'uint8'));
                obj.HW.n.Outputs = double(obj.SerialPort.read(1, 'uint8'));
                obj.HW.Outputs = [char(obj.SerialPort.read(obj.HW.n.Outputs, 'uint8')) 'GGG']; % G = Global timer / counter
                % Enable ports
                if length(obj.InputsEnabled) ~= obj.HW.n.Inputs
                    obj.InputsEnabled = zeros(1,obj.HW.n.Inputs);
                    PortPos = find(obj.HW.Inputs == 'P');
                    if ~isempty(PortPos)
                        obj.InputsEnabled(PortPos(1:3)) = 1;
                    end
                    obj.InputsEnabled(obj.HW.Inputs == 'B') = 1;
                    if obj.MachineType == 1
                        if obj.FirmwareBuild > 6 % Later versions use optoisolator for wire inputs - OK to activate
                            obj.InputsEnabled(obj.HW.Inputs == 'W') = 1;
                        end
                    end
                end
                obj.SerialPort.write(['E' obj.InputsEnabled], 'uint8');
                Confirmed = obj.SerialPort.read(1, 'uint8');
                if Confirmed ~= 1
                    error('Could not enable ports');
                end
                % Set up Sync config
                obj.SerialPort.write(['K' obj.SyncConfig.Channel obj.SyncConfig.SignalType], 'uint8');
                Confirmed = obj.SerialPort.read(1, 'uint8');
                if Confirmed ~= 1
                    error('Could not set sync configuration');
                end
                % Get info from modules
                nModules = sum(obj.HW.Outputs=='U');
                obj.Modules.Connected = zeros(1,nModules);
                obj.Modules.Name = cell(1,nModules);
                obj.Modules.FirmwareVersion = zeros(1,nModules);
                obj.SerialPort.write('M', 'uint8');
                pause(.1);
                messageLength = obj.SerialPort.bytesAvailable;
                if messageLength > 2
                    for i = 1:nModules
                        obj.Modules.Connected(i) = obj.SerialPort.read(1, 'uint8');
                        if obj.Modules.Connected(i) == 1
                            obj.Modules.FirmwareVersion(i) = obj.SerialPort.read(1, 'uint32');
                            nBytes = obj.SerialPort.read(1, 'uint32');
                            NameString = obj.SerialPort.read(nBytes, 'char');
                            SameModuleCount = 0;
                            for j = 1:nModules
                                if strcmp(obj.Modules.Name{j}(1:end-1), NameString)
                                    SameModuleCount = SameModuleCount + 1;
                                end
                            end
                            obj.Modules.Name{i} = [NameString num2str(SameModuleCount+1)];
                        end
                    end
                else
                    error('Error requesting module information: state machine did not return enough data.')
                end
            end
            obj.HW.ChannelKey = 'D = digital B/W = BNC/Wire (digital), P = Port (digital in, PWM out), S = SPI, U = UART, X = USB';
            obj.HW.n.BNCOutputs = sum(obj.HW.Outputs == 'B');
            obj.HW.n.BNCInputs = sum(obj.HW.Inputs == 'B');
            obj.HW.n.WireOutputs = sum(obj.HW.Outputs == 'W');
            obj.HW.n.WireInputs = sum(obj.HW.Inputs == 'W');
            obj.HW.n.Ports = sum(obj.HW.Outputs == 'P');
            obj.HW.n.DigitalInputs = obj.HW.n.BNCInputs + obj.HW.n.WireInputs + obj.HW.n.Ports;
            obj.HW.n.UartSerialChannels = sum(obj.HW.Outputs == 'U');
            obj.HW.n.USBChannels = sum(obj.HW.Outputs == 'X');
            obj.HW.n.SerialChannels = obj.HW.n.USBChannels + obj.HW.n.UartSerialChannels;
            obj.HW.EventTypes = [repmat('S', 1, obj.HW.n.SerialChannels*obj.HW.n.EventsPerSerialChannel) repmat('I', 1, obj.HW.n.DigitalInputs*2) repmat('T', 1, obj.HW.n.GlobalTimers*2 ) repmat('+', 1, obj.HW.n.GlobalCounters)  repmat('C', 1, obj.HW.n.Conditions) repmat('J', 1, obj.HW.n.SerialChannels) 'U'];
            obj.HW.EventKey = 'S = serial, I = i/o, T = global timer, + = global counter, C = condition, J = jump, U = state timer';
            obj.HW.IOEventStartposition = find(obj.HW.EventTypes == 'I', 1);
            obj.HW.GlobalTimerStartposition = find(obj.HW.EventTypes == 'T', 1);
            obj.HW.GlobalCounterStartposition = find(obj.HW.EventTypes == '+', 1);
            obj.HW.ConditionStartposition = find(obj.HW.EventTypes == 'C', 1);
            obj.HW.StateTimerPosition = find(obj.HW.EventTypes == 'U');
            obj.HW.Pos = struct; % Positions of different channel types in hardware description vectors 
            obj.HardwareState.Key = 'D = digital B/W = BNC/Wire (digital), P = Port (digital in, PWM out), S = SPI, U = UART, X = USB';
            obj.HardwareState.InputState = zeros(1,obj.HW.n.Inputs);
            obj.HardwareState.InputType = obj.HW.Inputs;
            obj.HardwareState.OutputState = zeros(1,obj.HW.n.Outputs+3);
            obj.HardwareState.OutputType = obj.HW.Outputs;
            obj.HardwareState.OutputOverride = zeros(1,obj.HW.n.Outputs+3);
            obj.LastHardwareState = obj.HardwareState;
            % Find positions of input channel groups
            obj.HW.Pos.Input_BNC = find(obj.HW.Inputs == 'B', 1);
            obj.HW.Pos.Input_Wire = find(obj.HW.Inputs == 'W', 1);
            obj.HW.Pos.Input_Port = find(obj.HW.Inputs == 'P', 1);
            obj.HW.Pos.Input_USB = find(obj.HW.Inputs == 'x', 1);
            
            % Set up event and output names
            EventNames = cell(1,obj.HW.n.SerialChannels*(obj.HW.n.EventsPerSerialChannel+1) + obj.HW.n.DigitalInputs*2 + 16);
            InputChannelNames = cell(1,obj.HW.n.Inputs);
            Pos = 1;
            nUSB = 0;
            nBNCs = 0;
            nWires = 0;
            nPorts = 0;
            nChannels = 0;
            for i = 1:obj.HW.n.Inputs
                switch obj.HW.Inputs(i)
                    case 'U'
                        nChannels = nChannels + 1;
                        if obj.Modules.Connected(i)
                            InputChannelNames{nChannels} = obj.Modules.Name{i};
                        else
                            InputChannelNames{nChannels} = ['Serial' num2str(i)];
                        end
                        for j = 1:obj.HW.n.EventsPerSerialChannel
                            EventNames{Pos} = [InputChannelNames{nChannels} '_' num2str(j)]; Pos = Pos + 1;
                        end                        
                    case 'X'
                        if nUSB == 0
                            obj.HW.Pos.Event_USB = Pos;
                        end
                        nChannels = nChannels + 1; nUSB = nUSB + 1;
                        InputChannelNames{nChannels} = ['USB' num2str(i)];
                        for j = 1:obj.HW.n.EventsPerSerialChannel
                            EventNames{Pos} = ['SoftCode' num2str(j)]; Pos = Pos + 1;
                        end
                    case 'P'
                        if nPorts == 0
                            obj.HW.Pos.Event_Port = Pos;
                        end
                        nPorts = nPorts + 1; nChannels = nChannels + 1;
                        InputChannelNames{nChannels} = ['Port' num2str(nPorts)];
                        EventNames{Pos} = [InputChannelNames{nChannels} 'In']; Pos = Pos + 1;
                        EventNames{Pos} = [InputChannelNames{nChannels} 'Out']; Pos = Pos + 1;
                    case 'B'
                        if nBNCs == 0
                            obj.HW.Pos.Event_BNC = Pos;
                        end
                        nBNCs = nBNCs + 1; nChannels = nChannels + 1;
                        InputChannelNames{nChannels} = ['BNC' num2str(nBNCs)];
                        EventNames{Pos} = [InputChannelNames{nChannels} 'High']; Pos = Pos + 1;
                        EventNames{Pos} = [InputChannelNames{nChannels} 'Low']; Pos = Pos + 1;
                    case 'W'
                        if nWires == 0
                            obj.HW.Pos.Event_Wire = Pos;
                        end
                        nWires = nWires + 1; nChannels = nChannels + 1;
                        InputChannelNames{nChannels} = ['Wire' num2str(nWires)];
                        EventNames{Pos} = [InputChannelNames{nChannels} 'High']; Pos = Pos + 1;
                        EventNames{Pos} = [InputChannelNames{nChannels} 'Low']; Pos = Pos + 1;
                end
            end
            for i = 1:obj.HW.n.GlobalTimers
                EventNames{Pos} = ['GlobalTimer' num2str(i) '_Start']; Pos = Pos + 1;
            end
            for i = 1:obj.HW.n.GlobalTimers
                EventNames{Pos} = ['GlobalTimer' num2str(i) '_End']; Pos = Pos + 1;
            end
            for i = 1:obj.HW.n.GlobalCounters
                EventNames{Pos} = ['GlobalCounter' num2str(i) '_End']; Pos = Pos + 1;
            end
            for i = 1:obj.HW.n.Conditions
                EventNames{Pos} = ['Condition' num2str(i)]; Pos = Pos + 1;
            end
            for i = 1:obj.HW.n.UartSerialChannels
                EventNames{Pos} = ['Serial' num2str(i) 'Jump']; Pos = Pos + 1;
            end
            EventNames{Pos} = 'SoftJump'; Pos = Pos + 1;
            EventNames{Pos} = 'Tup';
            obj.StateMachineInfo.EventNames = EventNames;
            obj.StateMachineInfo.InputChannelNames = InputChannelNames;
            
            OutputChannelNames = cell(1,obj.HW.n.Outputs + 3);
            Pos = 0;
            nUSB = 0;
            nSPI = 0;
            nBNCs = 0;
            nWires = 0;
            nPorts = 0;
            for i = 1:obj.HW.n.Outputs
                Pos = Pos + 1;
                switch obj.HW.Outputs(i)
                    case 'U'
                        if obj.Modules.Connected(i)
                            OutputChannelNames{Pos} = obj.Modules.Name{i};
                        else
                            OutputChannelNames{Pos} = ['Serial' num2str(i)];
                        end
                    case 'X'
                        OutputChannelNames{Pos} = 'SoftCode';
                        if nUSB == 0
                            obj.HW.Pos.Output_USB = Pos;
                            nUSB = 1;
                        end
                    case 'S'
                        if nSPI == 0
                            obj.HW.Pos.Output_SPI = Pos;
                            nSPI = nSPI + 1;
                        end
                        OutputChannelNames{Pos} = 'ValveState'; % Assumes SPI valve shift register
                    case 'P'
                        if nPorts == 0
                            obj.HW.Pos.Output_PWM = Pos;
                        end
                        nPorts = nPorts + 1;
                        OutputChannelNames{Pos} = ['PWM' num2str(nPorts)];
                    case 'B'
                        if nBNCs == 0
                            obj.HW.Pos.Output_BNC = Pos;
                        end
                        nBNCs = nBNCs + 1;
                        OutputChannelNames{Pos} = ['BNC' num2str(nBNCs)];
                    case 'W'
                        if nWires == 0
                            obj.HW.Pos.Output_Wire = Pos;
                        end
                        nWires = nWires + 1;
                        OutputChannelNames{Pos} = ['Wire' num2str(nWires)];
                end
            end
            Pos = Pos + 1;
            OutputChannelNames{Pos} = 'GlobalTimerTrig';
            obj.HW.Pos.GlobalTimerTrig = Pos;
            Pos = Pos + 1;
            OutputChannelNames{Pos} = 'GlobalTimerCancel';
            obj.HW.Pos.GlobalTimerCancel = Pos;
            Pos = Pos + 1;
            OutputChannelNames{Pos} = 'GlobalCounterReset';
            obj.HW.Pos.GlobalCounterReset = Pos;
            obj.StateMachineInfo.OutputChannelNames = OutputChannelNames;
            obj.StateMachineInfo.nEvents = length(obj.StateMachineInfo.EventNames);
            obj.StateMachineInfo.nOutputChannels = length(obj.StateMachineInfo.OutputChannelNames);
            % Create blank state matrix to store in Bpod object
            sma.meta = struct;
            sma.nStates = 0;
            sma.nStatesInManifest = 0;
            sma.Manifest = cell(1,obj.StateMachineInfo.MaxStates); % State names in the order they were added by user
            sma.StateNames = {'Placeholder'}; % State names in the order they were referenced
            nExtraEvents = obj.HW.n.GlobalTimers*2 + obj.HW.n.GlobalCounters + obj.HW.n.Conditions;
            sma.meta.InputMatrixSize = obj.StateMachineInfo.nEvents-(nExtraEvents+obj.HW.n.SerialChannels+1); % Subtract Global timers/counters/conditions, jump states and tup
            sma.InputMatrix = ones(1,sma.meta.InputMatrixSize);
            sma.meta.OutputMatrixSize = obj.StateMachineInfo.nOutputChannels;
            sma.OutputMatrix = zeros(1,sma.meta.OutputMatrixSize);
            sma.StateTimerMatrix = zeros(1,1);
            sma.GlobalTimerStartMatrix = ones(1,obj.HW.n.GlobalTimers);
            sma.GlobalTimerEndMatrix = ones(1,obj.HW.n.GlobalTimers);
            sma.GlobalTimers = struct;
            sma.GlobalTimers.Duration = zeros(1,obj.HW.n.GlobalTimers);
            sma.GlobalTimers.OnsetDelay = zeros(1,obj.HW.n.GlobalTimers);
            sma.GlobalTimers.OutputChannel = ones(1,obj.HW.n.GlobalTimers)*255; % Default channel code of 255 is "no channel".
            sma.GlobalTimers.OnMessage = zeros(1,obj.HW.n.GlobalTimers);
            sma.GlobalTimers.OffMessage = zeros(1,obj.HW.n.GlobalTimers);
            sma.GlobalTimers.IsSet = zeros(1,obj.HW.n.GlobalTimers); % Changed to 1 when the timer is set with SetGlobalTimer
            sma.GlobalCounterMatrix = ones(1,obj.HW.n.GlobalCounters);
            sma.GlobalCounterEvents = ones(1,obj.HW.n.GlobalCounters)*255; % Default event of 255 is code for "no event attached".
            sma.GlobalCounterThresholds = zeros(1,obj.HW.n.GlobalCounters);
            sma.GlobalCounterSet = zeros(1,obj.HW.n.GlobalCounters); % Changed to 1 when the counter event is identified and given a threshold with SetGlobalCounter
            sma.ConditionMatrix = zeros(1,obj.HW.n.Conditions);
            sma.ConditionChannels = zeros(1,obj.HW.n.Conditions);
            sma.ConditionValues = zeros(1,obj.HW.n.Conditions);
            sma.ConditionSet = zeros(1,obj.HW.n.Conditions);
            sma.StateTimers = 0;
            sma.StatesDefined = 1; % Referenced states are set to 0. Defined states are set to 1. Both occur with AddState
            obj.BlankStateMachine = sma;
            obj.BpodSplashScreen(3);
            obj.BpodSplashScreen(4);
            if isfield(obj.SystemSettings, 'BonsaiAutoConnect')
                if obj.SystemSettings.BonsaiAutoConnect == 1
                    try
                        disp('Attempting to connect to Bonsai. Timeout in 10 seconds...')
                        BpodSocketServer('connect', 11235);
                        obj.BonsaiSocket.Connected = 1;
                        disp('Connected to Bonsai on port: 11235')
                    catch
                        BpodErrorSound;
                        disp('Warning: Auto-connect to Bonsai failed. Please connect manually.')
                    end
                end
            end
            obj.BpodSplashScreen(5);
            close(obj.GUIHandles.SplashFig);
        end
        function obj = InitializeGUI(obj)
            obj.GUIHandles.MainFig = figure('Position',[80 100 800 400],'name','Bpod Console','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off', 'CloseRequestFcn', 'EndBpod');
            obj.GUIData.GoButton = imread('PlayButton.bmp');
            obj.GUIData.PauseButton = imread('PauseButton.bmp');
            obj.GUIData.PauseRequestedButton = imread('PauseRequestedButton.bmp');
            obj.GUIData.StopButton = imread('StopButton.bmp');
            obj.GUIHandles.RunButton = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [718 130 60 60], 'Callback', 'RunProtocol(''StartPause'')', 'CData', obj.GUIData.GoButton, 'TooltipString', 'Run selected protocol');
            obj.GUIHandles.EndButton = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [718 50 60 60], 'Callback', 'RunProtocol(''Stop'')', 'CData', obj.GUIData.StopButton, 'TooltipString', 'End session');
            obj.GUIData.OffButton = imread('ButtonOff.bmp');
            obj.GUIData.OffButtonDark = imread('ButtonOff_dark.bmp');
            obj.GUIData.OnButton = imread('ButtonOn.bmp');
            obj.GUIData.OnButtonDark = imread('ButtonOn_dark.bmp');
            obj.GUIData.SoftTriggerButton = imread('BpodSoftTrigger.bmp');
            obj.GUIData.SoftTriggerActiveButton = imread('BpodSoftTrigger_active.bmp');
            obj.GUIData.SettingsButton = imread('SettingsButton.bmp');
            obj.GUIData.DocButton = imread('DocButton.bmp');
            obj.GUIData.AddProtocolButton = imread('AddProtocolIcon.bmp');
            obj.GUIHandles.SettingsButton = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [750 275 29 29], 'Callback', 'BpodSettingsMenu', 'CData', obj.GUIData.SettingsButton, 'TooltipString', 'Settings and calibration');
            obj.GUIHandles.DocButton = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [700 275 29 29], 'Callback', @(h,e)obj.Wiki(), 'CData', obj.GUIData.DocButton, 'TooltipString', 'Documentation wiki');
            ypos = 188;
            if obj.MachineType == 1
                for i = 1:obj.HW.n.Ports
                    obj.GUIHandles.PortValveButton(i) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [ypos 260 30 30], 'Callback', ['ManualOverride(''OS'',1,' num2str(i) ');'], 'CData', obj.GUIData.OffButtonDark, 'TooltipString', ['Toggle port ' num2str(i) ' valve']);
                    obj.GUIHandles.PortLEDButton(i) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [ypos 220 30 30], 'Callback', ['ManualOverride(''OP'',' num2str(i) ');'], 'CData', obj.GUIData.OffButtonDark, 'TooltipString', ['Toggle port ' num2str(i) ' LED']);
                    obj.GUIHandles.PortvPokeButton(i) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [ypos 180 30 30], 'Callback', ['ManualOverride(''IP'',' num2str(i) ');'], 'CData', obj.GUIData.OffButtonDark, 'TooltipString', ['Port ' num2str(i) ' virtual photogate']);
                    ypos = ypos + 41;
                end
            end
            obj.GUIHandles.BNCInputButton(1) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [525 243 30 30], 'Callback', 'ManualOverride(''IB'',1);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Spoof BNC Input 1');
            obj.GUIHandles.BNCInputButton(2) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [565 243 30 30], 'Callback', 'ManualOverride(''IB'',2);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Spoof BNC Input 2');
            
            obj.GUIHandles.BNCOutputButton(1) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [605 243 30 30], 'Callback', 'ManualOverride(''OB'',1);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Toggle TTL: BNC Output 1');
            obj.GUIHandles.BNCOutputButton(2) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [645 243 30 30], 'Callback', 'ManualOverride(''OB'',2);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Toggle TTL:BNC Output 2');
            if obj.MachineType == 1
                obj.GUIHandles.InputWireButton(1) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [188 77 30 30], 'Callback', 'ManualOverride(''IW'',1);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Spoof input wire 1');
                obj.GUIHandles.InputWireButton(2) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [231 77 30 30], 'Callback', 'ManualOverride(''IW'',2);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Spoof input wire 1');
                if obj.FirmwareBuild < 8
                    obj.GUIHandles.InputWireButton(3) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [272 77 30 30], 'Callback', 'ManualOverride(''IW'',3);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Spoof input wire 1');
                    obj.GUIHandles.InputWireButton(4) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [313 77 30 30], 'Callback', 'ManualOverride(''IW'',4);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Spoof input wire 1');
                end
                obj.GUIHandles.OutputWireButton(1) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [188 36 30 30], 'Callback', 'ManualOverride(''OW'',1);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Toggle TTL: output wire 1');
                obj.GUIHandles.OutputWireButton(2) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [231 36 30 30], 'Callback', 'ManualOverride(''OW'',2);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Toggle TTL: output wire 1');
                obj.GUIHandles.OutputWireButton(3) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [272 36 30 30], 'Callback', 'ManualOverride(''OW'',3);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Toggle TTL: output wire 1');
                if obj.FirmwareBuild < 8
                    obj.GUIHandles.OutputWireButton(4) = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [313 36 30 30], 'Callback', 'ManualOverride(''OW'',4);', 'CData', obj.GUIData.OffButtonDark, 'TooltipString', 'Toggle TTL: output wire 1');
                end
            end
            if obj.MachineType == 1
                if obj.FirmwareBuild < 8
                    obj.GUIHandles.SoftTriggerButton = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [363 32 40 40], 'Callback', 'ManualOverride(''OX'',1);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send soft event code byte');
                    obj.GUIHandles.HWSerialTriggerButton1 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [414 32 40 40], 'Callback', 'ManualOverride(''OU'',1);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 1');
                    obj.GUIHandles.HWSerialTriggerButton2 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [465 32 40 40], 'Callback', 'ManualOverride(''OU'',2);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 2');
                    obj.GUIHandles.SoftCodeSelector = uicontrol('Style', 'edit', 'String', '0', 'Position', [363 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255; 0=no op)');
                    obj.GUIHandles.HWSerialCodeSelector1 = uicontrol('Style', 'edit', 'String', '0', 'Position', [414 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255; 0=no op)');
                    obj.GUIHandles.HWSerialCodeSelector2 = uicontrol('Style', 'edit', 'String', '0', 'Position', [465 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255; 0=no op)');

                else
                    obj.GUIHandles.SoftTriggerButton = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [320 32 40 40], 'Callback', 'ManualOverride(''OX'',1);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to MATLAB soft code handler function');
                    obj.GUIHandles.HWSerialTriggerButton1 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [370 32 40 40], 'Callback', 'ManualOverride(''OU'',1);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 1');
                    obj.GUIHandles.HWSerialTriggerButton2 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [420 32 40 40], 'Callback', 'ManualOverride(''OU'',2);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 2');
                    obj.GUIHandles.HWSerialTriggerButton3 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [470 32 40 40], 'Callback', 'ManualOverride(''OU'',3);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 3');
                    obj.GUIHandles.SoftCodeSelector = uicontrol('Style', 'edit', 'String', '0', 'Position', [320 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255; 0=no op)');
                    obj.GUIHandles.HWSerialCodeSelector1 = uicontrol('Style', 'edit', 'String', '0', 'Position', [370 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)');
                    obj.GUIHandles.HWSerialCodeSelector2 = uicontrol('Style', 'edit', 'String', '0', 'Position', [420 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)');
                    obj.GUIHandles.HWSerialCodeSelector3 = uicontrol('Style', 'edit', 'String', '0', 'Position', [470 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)');
                end
            else
                    Pos = 150;
                    obj.GUIHandles.SoftTriggerButton = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [Pos 32 40 40], 'Callback', 'ManualOverride(''OX'',1);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to MATLAB soft code handler function'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialTriggerButton1 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [Pos 32 40 40], 'Callback', 'ManualOverride(''OU'',1);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 1'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialTriggerButton2 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [Pos 32 40 40], 'Callback', 'ManualOverride(''OU'',2);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 2'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialTriggerButton3 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [Pos 32 40 40], 'Callback', 'ManualOverride(''OU'',3);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 3'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialTriggerButton4 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [Pos 32 40 40], 'Callback', 'ManualOverride(''OU'',4);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 4'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialTriggerButton5 = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [Pos 32 40 40], 'Callback', 'ManualOverride(''OU'',5);', 'CData', obj.GUIData.SoftTriggerButton, 'TooltipString', 'Send byte to hardware serial port 5'); Pos = Pos + 50;
                    Pos = 150;
                    obj.GUIHandles.SoftCodeSelector = uicontrol('Style', 'edit', 'String', '0', 'Position', [Pos 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255; 0=no op)'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialCodeSelector1 = uicontrol('Style', 'edit', 'String', '0', 'Position', [Pos 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialCodeSelector2 = uicontrol('Style', 'edit', 'String', '0', 'Position', [Pos 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialCodeSelector3 = uicontrol('Style', 'edit', 'String', '0', 'Position', [Pos 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialCodeSelector4 = uicontrol('Style', 'edit', 'String', '0', 'Position', [Pos 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)'); Pos = Pos + 50;
                    obj.GUIHandles.HWSerialCodeSelector5 = uicontrol('Style', 'edit', 'String', '0', 'Position', [Pos 80 40 25], 'FontWeight', 'bold', 'FontSize', 12, 'BackgroundColor', [.8 .8 .8], 'TooltipString', 'Enter byte code here (0-255;)'); Pos = Pos + 50;
            end
            obj.GUIHandles.CurrentStateDisplay = uicontrol('Style', 'text', 'String', 'None', 'Position', [12 268 115 20], 'FontWeight', 'bold', 'FontSize', 9);
            obj.GUIHandles.PreviousStateDisplay = uicontrol('Style', 'text', 'String', 'None', 'Position', [12 219 115 20], 'FontWeight', 'bold', 'FontSize', 9);
            obj.GUIHandles.LastEventDisplay = uicontrol('Style', 'text', 'String', 'None', 'Position', [12 169 115 20], 'FontWeight', 'bold', 'FontSize', 9);
            obj.GUIHandles.TimeDisplay = uicontrol('Style', 'text', 'String', '0', 'Position', [12 117 115 20], 'FontWeight', 'bold', 'FontSize', 9);
            obj.GUIHandles.CxnDisplay = uicontrol('Style', 'text', 'String', 'Idle', 'Position', [12 65 115 20], 'FontWeight', 'bold', 'FontSize', 9);
            obj.GUIHandles.ProtocolSelector = uicontrol('Style', 'listbox', 'String', 'Folder not found', 'Position', [520 45 185 150], 'Callback', @(h,e)obj.ProtocolSelectorNavigate(), 'FontWeight', 'bold', 'FontSize', 11, 'BackgroundColor', [.8 .8 .8]);
            
            % Remove all the nasty borders around pushbuttons on platforms besides win7
            if isempty(strfind(obj.HostOS, 'Windows 7'))
                handles = findjobj('class', 'pushbutton');
                set(handles, 'border', []);
            end
            
            try
                jScrollPane = findjobj(obj.GUIHandles.ProtocolSelector); % get the scroll-pane object
                jListbox = jScrollPane.getViewport.getComponent(0);
                set(jListbox, 'SelectionBackground',java.awt.Color.red); % option #1
            catch
            end
            %              set(obj.GUIHandles.MainFig, 'Color', [.37 .37 .37])
            ha = axes('units','normalized', 'position',[0 0 1 1]);
            uistack(ha,'bottom');
            BG = imread('ConsoleBG2.bmp');
            image(BG); axis off;
            if obj.FirmwareBuild < 8
                ver = '5';
            else
                ver = '7';
            end
            TitleFontName = 'OCRASTD';
            FontName = 'OCRASTD';
            % Add labels
            LabelFontColor = [0.8 0.8 0.8];
            if 1 %obj.EmulatorMode == 0
                Title = 'Bpod Console';
                TitleColor = LabelFontColor;
            else
                Title = 'Bpod Emulator';
                TitleColor = [0.9 0 0];
            end
            if ispc
                Vsm = 10; Sm = 12; Med = 13; Lg = 20;
            elseif ismac
                Vsm = 14; Sm = 16; Med = 17; Lg = 22;
                FontName = 'Arial';
            else
                Vsm = 10; Sm = 12; Med = 13; Lg = 20;
            end
            text(15, 30, Title, 'FontName', TitleFontName, 'FontSize', Lg, 'Color', TitleColor);
            line([280 770], [30 30], 'Color', LabelFontColor, 'LineWidth', 4);
            if obj.MachineType == 1
                text(620, 380,['r0.' ver ' beta'], 'FontName', TitleFontName, 'FontSize', Lg, 'Color', LabelFontColor);
            else
                text(620, 380,['pocket sm'], 'FontName', TitleFontName, 'FontSize', Lg, 'Color', LabelFontColor);
            end
            line([10 610], [380 380], 'Color', LabelFontColor, 'LineWidth', 4);
            text(10, 102,'Current State', 'FontName', FontName, 'FontSize', Vsm, 'Color', LabelFontColor);
            text(10, 153,'Previous State', 'FontName', FontName, 'FontSize', Vsm, 'Color', LabelFontColor);
            text(10, 204,'Last Event', 'FontName', FontName, 'FontSize', Vsm, 'Color', LabelFontColor);
            text(10, 255,'Trial-Start', 'FontName', FontName, 'FontSize', Vsm, 'Color', LabelFontColor);
            text(10, 306,'Link Status', 'FontName', FontName, 'FontSize', Vsm, 'Color', LabelFontColor);
            text(40, 65,'Info', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            line([10 130], [80 80], 'Color', LabelFontColor, 'LineWidth', 2);
            if obj.MachineType == 1
                text(269, 65,'Port Override', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                line([170 505], [80 80], 'Color', LabelFontColor, 'LineWidth', 2);
            end
            text(525, 65,'BNC Override', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            line([525 675], [80 80], 'Color', LabelFontColor, 'LineWidth', 2);
            text(690, 65,'Settings', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            line([690 790], [80 80], 'Color', LabelFontColor, 'LineWidth', 2);
            text(520, 180,'Protocol Select', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            line([520 705], [195 195], 'Color', LabelFontColor, 'LineWidth', 2);
            Pos = 198;
            if obj.MachineType == 1
                for x = 1:8
                    text(Pos, 100,num2str(x), 'FontName', FontName, 'FontSize', Sm, 'Color', LabelFontColor);
                    Pos = Pos + 41;
                end
            end
            Pos = 533;
            for x = 1:2
                text(Pos, 115,num2str(x), 'FontName', FontName, 'FontSize', Sm, 'Color', LabelFontColor);
                Pos = Pos + 41;
            end
            Pos = 613;
            for x = 1:2
                text(Pos, 115,num2str(x), 'FontName', FontName, 'FontSize', Sm, 'Color', LabelFontColor);
                Pos = Pos + 41;
            end
            Pos = 198;
            if obj.FirmwareBuild < 8
                nWireChannels = 4;
            else
                nWireChannels = 3;
            end
            if obj.MachineType == 1
                for x = 1:nWireChannels
                    text(Pos, 280,num2str(x), 'FontName', FontName, 'FontSize', Sm, 'Color', LabelFontColor);
                    Pos = Pos + 41;
                end
            end
            if obj.MachineType == 1
                if obj.FirmwareBuild < 8
                    text(170, 250,'Wire Override', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                    line([170 350], [265 265], 'Color', LabelFontColor, 'LineWidth', 2);
                    text(375, 250,'Serial Out', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                    line([360 510], [265 265], 'Color', LabelFontColor, 'LineWidth', 2);
                else
                    T = text(190, 250,'Wire I/O', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                    line([170 305], [265 265], 'Color', LabelFontColor, 'LineWidth', 2);
                    text(350, 250,'Serial Out', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                    line([320 510], [265 265], 'Color', LabelFontColor, 'LineWidth', 2);
                end
            else
                text(150, 250,'Serial Out', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                line([150 450], [265 265], 'Color', LabelFontColor, 'LineWidth', 2);
            end
            if obj.MachineType == 1
                text(145, 125,'H2O', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                text(145, 165,'LED', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
                text(145, 205,'IR', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            
            text(145, 310,'In', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            text(145, 350,'Out', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            end
            text(547, 95,'In', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            text(620, 95,'Out', 'FontName', FontName, 'FontSize', Med, 'Color', LabelFontColor);
            if obj.MachineType == 1
                if obj.FirmwareBuild > 7
                    Pos = 322;
                else
                    Pos = 365;
                end
            else
                Pos = 236;
            end
            if obj.MachineType == 1
            text(Pos, 280,'USB', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
            text(Pos, 280,'HW1', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
            text(Pos, 280,'HW2', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
                if obj.FirmwareBuild > 7
                    text(Pos, 280,'HW3', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor);
                end
            else
                Pos = 150;
                text(Pos, 280,'USB', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
                text(Pos, 280,'HW1', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
                text(Pos, 280,'HW2', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
                text(Pos, 280,'HW3', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
                text(Pos, 280,'HW4', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
                text(Pos, 280,'HW5', 'FontName', FontName, 'FontSize', 13, 'Color', LabelFontColor); Pos = Pos + 50;
            end
            set(ha,'handlevisibility','off','visible','off');
            set(obj.GUIHandles.MainFig,'handlevisibility','off');
            
            obj.loadProtocols;
            obj.ProtocolSelectorLastValue = 1;
        end
        function obj = RefreshGUI(obj)
            if ~isempty(obj.StateMatrix)
                set(obj.GUIHandles.PreviousStateDisplay, 'String', obj.Status.LastStateName);
                set(obj.GUIHandles.CurrentStateDisplay, 'String', obj.Status.CurrentStateName);
                if obj.Status.LastEvent > 0
                    if obj.Status.LastEvent <= length(obj.StateMachineInfo.EventNames)
                        set(obj.GUIHandles.LastEventDisplay, 'String', obj.StateMachineInfo.EventNames{obj.Status.LastEvent});
                    end
                end
            end
            startPos = obj.HW.n.SerialChannels;
            ChangedOutputChannels = find(obj.HardwareState.OutputState ~= obj.LastHardwareState.OutputState);
            ChangedOutputChannels = ChangedOutputChannels(ChangedOutputChannels>startPos);
            for i = ChangedOutputChannels
                thisChannelType = obj.HardwareState.OutputType(i);
                thisChannelState = obj.HardwareState.OutputState(i);
                lastChannelState = obj.LastHardwareState.OutputState(i);
                switch thisChannelType
                    case 'S' % Assume this SPI channel is a power shift register to control valves
                        for j = 1:8
                            valveState = bitget(thisChannelState,j);
                            lastValveState = bitget(lastChannelState, j);
                            if valveState ~= lastValveState
                                if valveState == 1
                                    set(obj.GUIHandles.PortValveButton(j), 'CData', obj.GUIData.OnButtonDark);
                                else
                                    set(obj.GUIHandles.PortValveButton(j), 'CData', obj.GUIData.OffButtonDark);
                                end
                            end
                        end
                    case 'B' % BNC (digital)
                        if thisChannelState == 1
                            set(obj.GUIHandles.BNCOutputButton(i-obj.HW.Pos.Output_BNC+1), 'CData', obj.GUIData.OnButtonDark);
                        else
                            set(obj.GUIHandles.BNCOutputButton(i-obj.HW.Pos.Output_BNC+1), 'CData', obj.GUIData.OffButtonDark);
                        end
                    case 'W' % Wire (digital)
                        if thisChannelState == 1
                            set(obj.GUIHandles.OutputWireButton(i-obj.HW.Pos.Output_Wire+1), 'CData', obj.GUIData.OnButtonDark);
                        else
                            set(obj.GUIHandles.OutputWireButton(i-obj.HW.Pos.Output_Wire+1), 'CData', obj.GUIData.OffButtonDark);
                        end
                    case 'P' % Port (PWM)
                        if thisChannelState > 0
                            set(obj.GUIHandles.PortLEDButton(i-obj.HW.Pos.Output_PWM+1), 'CData', obj.GUIData.OnButtonDark);
                        else
                            set(obj.GUIHandles.PortLEDButton(i-obj.HW.Pos.Output_PWM+1), 'CData', obj.GUIData.OffButtonDark);
                        end
                end
            end
            ChangedInputChannels = find(obj.HardwareState.InputState ~= obj.LastHardwareState.InputState);
            for i = ChangedInputChannels
                thisChannelType = obj.HardwareState.InputType(i);
                thisChannelState = obj.HardwareState.InputState(i);
                switch thisChannelType
                    case 'P' % Port (digital)
                        if thisChannelState == 1
                            set(obj.GUIHandles.PortvPokeButton(i-obj.HW.Pos.Input_Port+1), 'CData', obj.GUIData.OnButtonDark);
                        else
                            set(obj.GUIHandles.PortvPokeButton(i-obj.HW.Pos.Input_Port+1), 'CData', obj.GUIData.OffButtonDark);
                        end
                    case 'B' % BNC (digital)
                        if thisChannelState == 1
                            set(obj.GUIHandles.BNCInputButton(i-obj.HW.Pos.Input_BNC+1), 'CData', obj.GUIData.OnButtonDark);
                        else
                            set(obj.GUIHandles.BNCInputButton(i-obj.HW.Pos.Input_BNC+1), 'CData', obj.GUIData.OffButtonDark);
                        end
                    case 'W' % Wire (digital)
                        if thisChannelState == 1
                            set(obj.GUIHandles.InputWireButton(i-obj.HW.Pos.Input_Wire+1), 'CData', obj.GUIData.OnButtonDark);
                        else
                            set(obj.GUIHandles.InputWireButton(i-obj.HW.Pos.Input_Wire+1), 'CData', obj.GUIData.OffButtonDark);
                        end
                end
            end
            
            obj.LastHardwareState = obj.HardwareState;
        end
        function obj = setupFolders(obj)
            obj.GUIHandles.FolderConfigFig = figure('Position', [350 480 600 130],'name','Setup folders','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');
            ha = axes('units','normalized', 'position',[0 0 1 1]);
            uistack(ha,'bottom');
            BG = imread('SettingsMenuBG2.bmp');
            image(BG); axis off; drawnow;
            text(10, 28,'Protocols', 'FontName', 'OCRAStd', 'FontSize', 13, 'Color', [0.8 0.8 0.8]);
            text(10, 68,'Data Root', 'FontName', 'OCRAStd', 'FontSize', 13, 'Color', [0.8 0.8 0.8]);
            if isfield(obj.SystemSettings, 'ProtocolFolder')
                if isempty(obj.SystemSettings.ProtocolFolder)
                    ProtocolPath = fullfile(obj.Path.LocalDir, 'Protocols',filesep);
                else
                    ProtocolPath = obj.SystemSettings.ProtocolFolder;
                end
            else
                ProtocolPath = fullfile(obj.Path.LocalDir, 'Protocols',filesep);
            end
            if isfield(obj.SystemSettings, 'DataFolder')
                if isempty(obj.SystemSettings.DataFolder)
                    DataPath = fullfile(obj.Path.LocalDir, 'Data',filesep);
                else
                    DataPath = obj.SystemSettings.DataFolder;
                end
            else
                DataPath = fullfile(obj.Path.LocalDir, 'Data',filesep);
            end
            ImportButtonGFX = imread('ImportButton.bmp');
            obj.GUIHandles.setupFoldersButton = uicontrol('Style', 'pushbutton', 'String', 'Ok', 'Position', [270 10 60 25], 'Callback', @(h,e)obj.setFolders(), 'BackgroundColor', [.4 .4 .4], 'ForegroundColor', [1 1 1]);
            obj.GUIHandles.dataFolderEdit = uicontrol('Style', 'edit', 'String', DataPath, 'Position', [140 50 410 25], 'HorizontalAlignment', 'Left', 'BackgroundColor', [.8 .8 .8], 'FontSize', 10, 'FontName', 'Arial');
            obj.GUIHandles.dataFolderNav = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [560 50 25 25], 'BackgroundColor', [.8 .8 .8], 'CData', ImportButtonGFX, 'Callback', @(h,e)obj.folderSetupUIGet('Data'));
            obj.GUIHandles.protocolFolderEdit = uicontrol('Style', 'edit', 'String', ProtocolPath, 'Position', [140 90 410 25], 'HorizontalAlignment', 'Left', 'BackgroundColor', [.8 .8 .8], 'FontSize', 10, 'FontName', 'Arial');
            obj.GUIHandles.protocolFolderNav = uicontrol('Style', 'pushbutton', 'String', '', 'Position', [560 90 25 25], 'BackgroundColor', [.8 .8 .8], 'CData', ImportButtonGFX, 'Callback', @(h,e)obj.folderSetupUIGet('Protocol'));
        end
        function obj = folderSetupUIGet(obj, type)
            switch type
                case 'Data'
                    OriginalFolder = get(obj.GUIHandles.dataFolderEdit, 'String');
                    ChosenFolder = uigetdir(obj.Path.LocalDir, 'Select Bpod data folder');
                    if ChosenFolder == 0
                        ChosenFolder = OriginalFolder;
                    end
                    set(obj.GUIHandles.dataFolderEdit, 'String', fullfile(ChosenFolder, filesep));
                case 'Protocol'
                    OriginalFolder = get(obj.GUIHandles.protocolFolderEdit, 'String');
                    ChosenFolder = uigetdir(obj.Path.LocalDir, 'Select Bpod protocol folder');
                    if ChosenFolder == 0
                        ChosenFolder = OriginalFolder;
                    end
                    set(obj.GUIHandles.protocolFolderEdit, 'String', fullfile(ChosenFolder, filesep));
            end
        end
        function obj = setFolders(obj)
            DataFolder = get(obj.GUIHandles.dataFolderEdit, 'String');
            ProtocolFolder = get(obj.GUIHandles.protocolFolderEdit, 'String');
            if exist(DataFolder) == 0
                mkdir(DataFolder);
            end
            if exist(ProtocolFolder) == 0
                mkdir(ProtocolFolder);
            end
            Contents = dir(ProtocolFolder);
            if length(Contents) == 2
                choice = questdlg('Copy example protocols to new protocol folder?', ...
                    'Protocol folder is empty', ...
                    'Yes', 'No', 'No');
                if strcmp(choice, 'Yes')
                    copyfile(fullfile(obj.Path.BpodRoot, 'Examples', 'Protocols'), ProtocolFolder);
                end
            end
            obj.Path.ProtocolFolder = ProtocolFolder;
            obj.Path.DataFolder = DataFolder;
            obj.SystemSettings.ProtocolFolder = ProtocolFolder;
            obj.SystemSettings.DataFolder = DataFolder;
            obj.SaveSettings;
            close(obj.GUIHandles.FolderConfigFig);
            obj.loadProtocols;
        end
        function obj = loadProtocols(obj)
            if isempty(obj.Path.ProtocolFolder)
                choice = questdlg('Protocols folder not found.', ...
                    'Protocol folder not found', ...
                    'Select folder', 'Select folder');
                obj.setupFolders;
            elseif isempty(obj.Path.DataFolder)
                choice = questdlg('Data folder not found.', ...
                    'Data folder not found', ...
                    'Select folder', 'Select folder');
                obj.setupFolders;
            else
                if strcmp(obj.Path.ProtocolFolder, obj.SystemSettings.ProtocolFolder)
                    startPos = 3;
                else
                    startPos = 2;
                end
                Candidates = dir(obj.Path.ProtocolFolder);
                ProtocolNames = cell(1);
                nProtocols = 0;
                for x = startPos:length(Candidates)
                    if Candidates(x).isdir
                        ProtocolFolder = fullfile(obj.Path.ProtocolFolder, Candidates(x).name);
                        Contents = dir(ProtocolFolder);
                        nItems = length(Contents);
                        Found = 0;
                        for y = 3:nItems
                            if strcmp(Contents(y).name, [Candidates(x).name '.m'])
                                Found = 1;
                            end
                        end
                        if Found
                            ProtocolName = Candidates(x).name;
                        else
                            ProtocolName = ['<' Candidates(x).name '>'];
                        end
                        nProtocols = nProtocols + 1;
                        ProtocolNames{nProtocols} = ProtocolName;
                    end
                end
                if isempty(ProtocolNames)
                    ProtocolNames = {'No Protocols Found'};
                else
                    % Sort to put organizing directories first
                    Types = ones(1,nProtocols);
                    for i = 1:nProtocols
                        ProtocolName = ProtocolNames{i};
                        if ProtocolName(1) == '<'
                            Types(i) = 0;
                        end
                    end
                    [~, Order] = sort(Types);
                    ProtocolNames = ProtocolNames(Order);
                end
                set(obj.GUIHandles.ProtocolSelector, 'String', ProtocolNames);
            end
        end
        function obj = ProtocolSelectorNavigate(obj)
            currentValue = get(obj.GUIHandles.ProtocolSelector, 'Value');
            if currentValue == obj.ProtocolSelectorLastValue
                String = get(obj.GUIHandles.ProtocolSelector, 'String');
                Candidate = String{currentValue};
                if Candidate(1) == '<'
                    FolderName = Candidate(2:end-1);
                    set(obj.GUIHandles.ProtocolSelector, 'Value', 1);
                    if FolderName(1) == '.'
                        obj.Path.ProtocolFolder = obj.SystemSettings.ProtocolFolder;
                    else
                        obj.Path.ProtocolFolder = fullfile(obj.Path.ProtocolFolder, FolderName);
                    end
                    obj.loadProtocols;
                end
            end
            obj.ProtocolSelectorLastValue = currentValue;
        end
        function monitoring(obj,state)
            obj.SerialPort.write(['Q' state], 'uint8');
            switch(state)
                case 0
                    disp('Cycle monitoring OFF.');
                case 1
                    disp('Cycle monitoring ON.');
            end
            obj.CycleMonitoring = state;
        end
        function returnMonitorStats(obj)
            if obj.CycleMonitoring
                obj.SerialPort.write('#', 'uint8');
                CallbackRange = obj.SerialPort.read(2, 'uint16');
                disp(['Minimum cycle duration measured: ' num2str(CallbackRange(1)) 'us']);
                disp(['Maximum cycle duration measured: ' num2str(CallbackRange(2)) 'us']);
            else
                error('You must first activate cycle monitoring with the function: monitoring(state)')
            end
        end
        function obj = Wiki(obj)
            if ispc || ismac
                web ('https://www.sites.google.com/site/bpoddocumentation/home', '-browser');
            else
                web ('https://www.sites.google.com/site/bpoddocumentation/home');
            end
        end
        function obj = SaveSettings(obj)
            BpodSettings = obj.SystemSettings;
            save(fullfile(obj.Path.LocalDir, 'Settings', 'BpodSettings.mat'), 'BpodSettings');
        end
        function obj = BeingUsed(obj)
            error('Error: "BpodSystem.BeingUsed" is now "BpodSystem.Status.BeingUsed" - Please update your protocol!')
        end
        function delete(obj) % Destructor
            obj.SerialPort = []; % Trigger the ArCOM port's destructor function (closes and releases port)
        end
    end
    methods (Access = private)
        function ArduinoPorts = FindArduinoPorts(obj)
            if ispc
                [Status RawString] = system('wmic path Win32_SerialPort Where "Caption LIKE ''%Arduino%''" Get DeviceID'); % Search for Arduino on USB Serial
                [Status RawString2] = system('wmic path Win32_SerialPort Where "Caption LIKE ''%Teensy%''" Get DeviceID'); % Search for Teensy on USB Serial
                RawString = [RawString RawString2];
                PortLocations = strfind(RawString, 'COM');
                ArduinoPorts = cell(1,100);
                nPorts = length(PortLocations);
                for x = 1:nPorts
                    Clip = RawString(PortLocations(x):PortLocations(x)+6);
                    ArduinoPorts{x} = Clip(1:find(Clip == 32,1, 'first')-1);
                end
                ArduinoPorts = ArduinoPorts(1:nPorts);
            elseif ismac % Contributed by Thiago Gouvea JUN_9_2016
                [trash, RawSerialPortList] = system('ls /dev/tty.usbmodem*');
                string = strtrim(RawSerialPortList);
                PortStringPositions = strfind(string, '/dev/tty.usbmodem');
                nPorts = length(PortStringPositions);
                CandidatePorts = cell(1,nPorts);
                nGoodPorts = 0;
                for x = 1:nPorts
                    if PortStringPositions(x)+20 <= length(string)
                        CandidatePort = strtrim(string(PortStringPositions(x):PortStringPositions(x)+20));
                        nGoodPorts = nGoodPorts + 1;
                        CandidatePorts{nGoodPorts} = CandidatePort;
                    end
                end
                ArduinoPorts = CandidatePorts(1:nGoodPorts);
            else
                [trash, RawSerialPortList] = system('ls /dev/ttyACM*');
                string = strtrim(RawSerialPortList);
                PortStringPositions = strfind(string, '/dev/ttyACM');
                nPorts = length(PortStringPositions);
                CandidatePorts = cell(1,nPorts);
                nGoodPorts = 0;
                for x = 1:nPorts
                    if PortStringPositions(x)+11 <= length(string)
                        CandidatePort = strtrim(string(PortStringPositions(x):PortStringPositions(x)+11));
                        nGoodPorts = nGoodPorts + 1;
                        CandidatePorts{nGoodPorts} = CandidatePort;
                    end
                end
                ArduinoPorts = CandidatePorts(1:nGoodPorts);
            end
        end
        function BpodSplashScreen(obj, Stage)
            if Stage == 1
                ha = axes('units','normalized', 'position',[0 0 1 1]);
                uistack(ha,'bottom');
            end
            Img = obj.SplashData.BG;
            Img(201:240,1:485) = obj.SplashData.Messages(:,:,Stage);
            Img(270:274, 43:442) = ones(5,400)*128;
            StartPos = 43;
            EndPos = 44;
            switch Stage
                case 1
                    StepSize = 3;
                    while EndPos < 123
                        EndPos = EndPos + StepSize;
                        Img(270:274, StartPos:EndPos) = ones(5,(EndPos-(StartPos-1)))*20;
                        imagesc(Img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off'); axis off; drawnow;
                    end
                case 2
                    StepSize = 5;
                    EndPos = 123;
                    while EndPos < 203
                        EndPos = EndPos + StepSize;
                        Img(270:274, StartPos:EndPos) = ones(5,(EndPos-(StartPos-1)))*20;
                        imagesc(Img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off'); axis off; drawnow;
                    end
                case 3
                    StepSize = 5;
                    EndPos = 203;
                    while EndPos < 283
                        EndPos = EndPos + StepSize;
                        Img(270:274, StartPos:EndPos) = ones(5,(EndPos-(StartPos-1)))*20;
                        imagesc(Img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off'); axis off; drawnow;
                    end
                case 4
                    StepSize = 5;
                    EndPos = 283;
                    while EndPos < 363
                        EndPos = EndPos + StepSize;
                        Img(270:274, StartPos:EndPos) = ones(5,(EndPos-(StartPos-1)))*20;
                        imagesc(Img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off'); axis off; drawnow;
                    end
                case 5
                    StepSize = 5;
                    EndPos = 363;
                    while EndPos < 442
                        EndPos = EndPos + StepSize;
                        Img(270:274, StartPos:EndPos) = ones(5,(EndPos-(StartPos-1)))*20;
                        imagesc(Img); colormap('gray'); set(gcf,'name','Bpod','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off'); axis off; drawnow;
                    end
                    pause(.5);
            end
        end
    end
end